// Copyright 2015 Pierre Talbot (IRCAM)

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

use concept::*;
use kernel::*;
use propagators::cmp::*;
use search::branching::branch::*;
use search::branching::*;
use search::space::*;
use term::*;

pub struct Enumerate;

impl<VStore, CStore, R, Domain, Bound> Distributor<Space<VStore, CStore, R>, Bound> for Enumerate
where
    VStore: VStoreConcept<Item = Domain, Location = Identity<Domain>, Output = Domain> + 'static,
    CStore: IntCStore<VStore>,
    Domain: IntDomain<Item = Bound> + 'static,
    Bound: IntBound + Copy + 'static,
    R: FreezeSpace<VStore, CStore> + Snapshot<State = Space<VStore, CStore, R>>,
{
    fn distribute(
        &mut self,
        space: Space<VStore, CStore, R>,
        var_idx: usize,
        val: Bound,
    ) -> (
        <Space<VStore, CStore, R> as Freeze>::FrozenState,
        Vec<Branch<Space<VStore, CStore, R>>>,
    ) {
        // Note that `Copy` on `Bound` should not be mandatory.
        // This is a problem generated by the Rust issue #28796, because we cannot box (and thus return) closures that contain moved values.
        // This is also why we have redundant code in both branches, we can only pass value that can be copied to the closures (here `var_idx` and `val`).
        Branch::distribute(
            space,
            vec![
                Box::new(move |space: &mut Space<VStore, CStore, R>| {
                    let x = Box::new(Identity::<Domain>::new(var_idx)) as Var<VStore>;
                    let v = Box::new(Constant::new(val)) as Var<VStore>;
                    let x_eq_v = XEqY::new(x.bclone(), v.bclone());
                    space.cstore.alloc(Box::new(x_eq_v));
                }),
                Box::new(move |space: &mut Space<VStore, CStore, R>| {
                    let x = Box::new(Identity::<Domain>::new(var_idx)) as Var<VStore>;
                    let v = Box::new(Constant::new(val)) as Var<VStore>;
                    let x_neq_v = XNeqY::new(x, v);
                    space.cstore.alloc(Box::new(x_neq_v));
                }),
            ],
        )
    }
}

#[cfg(test)]
mod test {
    use super::*;
    use search::branching::binary_split::test::test_distributor;
    use search::branching::MinVal;

    #[test]
    fn binary_split_distribution() {
        let vars = vec![(1, 10), (2, 4), (1, 2)];
        test_distributor(Enumerate, MinVal, 0, vars.clone(), vec![(1, 1), (2, 10)]);
        test_distributor(Enumerate, MinVal, 1, vars.clone(), vec![(2, 2), (3, 4)]);
        test_distributor(Enumerate, MinVal, 2, vars.clone(), vec![(1, 1), (2, 2)]);
    }

    #[test]
    #[should_panic]
    fn binary_split_impossible_distribution() {
        test_distributor(Enumerate, MinVal, 0, vec![(1, 1)], vec![]);
    }

    #[test]
    #[should_panic]
    fn binary_split_impossible_distribution_2() {
        test_distributor(Enumerate, MinVal, 2, vec![(1, 5), (2, 4), (4, 4)], vec![]);
    }
}
